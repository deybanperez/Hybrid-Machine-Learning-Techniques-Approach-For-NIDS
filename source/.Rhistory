rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("e1071")
readRDS("feature_selection/SVM/results_PCA.rds")
results = readRDS("feature_selection/SVM/results_PCA.rds")
View(results)
for (i in results)
{
cat(i, " ")
}
for (i in 1:length(results))
{
cat(i, " ")
}
for (i in nrow(results))
mean(results[i,])
for (i in 1:nrow(results))
mean(results[i,])
mean(results[1,])
1:nrow(results)
for (i in 1:nrow(results))
mean(results[i,])
for(i in 1:nrow(results))
mean(results[i,])
mean.results = vector(mode = "numeric", length = nrow(results))
for(i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
mean.results
mean(results[1,])
mean(results[2,])
mean(results[40,])
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("e1071")
results = readRDS("feature_selection/SVM/results_PCA.rds")
#############################################################
#Calculating mean an standard deviation of results
sd.results = vector(mode = "numeric", length = nrow(results))
mean.results = vector(mode = "numeric", length = nrow(results))
#Standard deviation
for(i in 1:length(sd.results))
sd.results[i] = sd(results[i,])
#Mean
for(i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
plot(sd.results, col = "blue", type = "b")
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation per Component", xlabel = "Number of Components",
ylabel = "Standard Deviation")
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation per Component", xlab = "Number of Components",
ylab =  = "Standard Deviation")
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation per Component",
xlab = "Number of Components", ylab = "Standard Deviation")
plot(mean.results, col = "blue", type = "b",
main = "Mean Accuracy per Component",
xlab = "Number of Components", ylab = "Mean Accuracy")
par(mfrow = c(1,2))
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation per Component",
xlab = "Number of Components", ylab = "Standard Deviation")
plot(mean.results, col = "blue", type = "b",
main = "Mean Accuracy per Component",
xlab = "Number of Components", ylab = "Mean Accuracy")
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("nnet")
results = readRDS("feature_selection/NN/results_PCA.rds")
#############################################################
#Calculating mean an standard deviation of results
sd.results = vector(mode = "numeric", length = nrow(results))
mean.results = vector(mode = "numeric", length = nrow(results))
#Standard deviation
for(i in 1:length(sd.results))
sd.results[i] = sd(results[i,])
#Mean
for(i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
#Splitting the screen for plot into two sections
par(mfrow = c(1,2))
#Plotting the SD vs #Comps
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation per Component",
xlab = "Number of Components", ylab = "Standard Deviation")
#Plotting the Mean vs #Comps
plot(mean.results, col = "blue", type = "b",
main = "Mean Accuracy per Component",
xlab = "Number of Components", ylab = "Mean Accuracy")
results  = readRDS("feature_selection/SVM/results_PCA.rds")
par(mfrow = c(1,2))
#Preparing environment
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("e1071")
#Loading the results
results  = readRDS("feature_selection/SVM/results_PCA.rds")
###########################################################
#Creating new variables
sd.results = vector(mode = "numeric", length = nrow(results))
mean.results = vector(mode = "numeric", length = nrow(results))
#Calculating standard deviation
for (i in 1:length(sd.results))
sd.results[i] = sd(results[i,])
#Calculating mean
for (i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
##########################################################
#Splitting the screen in 2
par(mfrow = c(1,2))
#Plotting standard deviation vs number of components
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation vs Number of Components",
xlab = "Number of Components", ylab = "Standard Deviation")
#Plotting mean accuracy vs number of components
plot(sd.results, col = "blue", type = "b",
main = "Mean Accuracy vs Number of Components",
xlab = "Number of Components", ylab = "Mean Accuracy")
#Preparing environment
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("e1071")
#Loading the results
results  = readRDS("feature_selection/SVM/results_PCA.rds")
###########################################################
#Creating new variables
sd.results = vector(mode = "numeric", length = nrow(results))
mean.results = vector(mode = "numeric", length = nrow(results))
#Calculating standard deviation
for (i in 1:length(sd.results))
sd.results[i] = sd(results[i,])
#Calculating mean
for (i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
##########################################################
#Splitting the screen in 2
par(mfrow = c(1,2))
#Plotting standard deviation vs number of components
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation vs Number of Components",
xlab = "Number of Components", ylab = "Standard Deviation")
#Plotting mean accuracy vs number of components
plot(mean.results, col = "blue", type = "b",
main = "Mean Accuracy vs Number of Components",
xlab = "Number of Components", ylab = "Mean Accuracy")
#Preparing environment
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("nnet")
#Loading the results
results  = readRDS("feature_selection/NN/results_PCA.rds")
###########################################################
#Creating new variables
sd.results = vector(mode = "numeric", length = nrow(results))
mean.results = vector(mode = "numeric", length = nrow(results))
#Calculating standard deviation
for (i in 1:length(sd.results))
sd.results[i] = sd(results[i,])
#Calculating mean
for (i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
##########################################################
#Splitting the screen in 2
par(mfrow = c(1,2))
#Plotting standard deviation vs number of components
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation vs Number of Components",
xlab = "Number of Components", ylab = "Standard Deviation")
#Plotting mean accuracy vs number of components
plot(mean.results, col = "blue", type = "b",
main = "Mean Accuracy vs Number of Components",
xlab = "Number of Components", ylab = "Mean Accuracy")
700/40
100 - (700/40)
40:1
