dataset %/%10
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
require("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#splitting the dataset into training and testing
#Making a stratified sampling
################################################
set.seed(10)
dataset %/%10
nrow(dataset) %/% 10
(nrow(dataset) %/% 10) * 10
nrow(dataset)
folds = sample(1:k, size = nrow(dataset), replace = TRUE)
folds = sample(1:10, size = nrow(dataset), replace = TRUE)
table(folds)
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#splitting the dataset into training and testing
#Making a stratified sampling
################################################
#Start calculating the number of each class
vector.ocurrences = SumLabels(dataset, ncol(dataset))
#Create probability vector
vector.probabilities = ProbVector(dataset, vector.ocurrences)
results.nn = vector(mode = "numeric", length = 10)
best.accuracy = 0
cv.set =CVSet(dataset, k = 10, seed = 22)
str(cv.set)
length(cv.set)
cv.set[[-1]]
cv.errors = matrix(NA,k,19, dimnames = list(NULL, paste(1:19)))
cv.errors = matrix(NA,10,19, dimnames = list(NULL, paste(1:19)))
View(cv.errors)
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
require("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#splitting the dataset into training and testing
#Starting k-fold cross validation
cv.sets =CVSet(dataset, k = 10, seed = 22)
str(cv.sets)
length(cv.sets)
#Starting with the training
results.nn = vector(mode = "numeric", length = 10)
best.accuracy = 0
testingset = as.data.frame(cv.sets[[1]])
trainigset = cv.sets
trainigset[[1]] = NULL
trainigset = do.call(rbind, trainigset)
#Scaliing sets
testingset = ScaleSet(testingset)
#Scaling trainingset
trainingset = ScaleSet(trainingset)
trainingset = do.call(rbind, trainigset)
trainingset = ScaleSet(trainingset)
#NN Model
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
require("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling set
dataset = ScaleSet(dataset)
cv.sets =CVSet(dataset, k = 10, seed = 22)
str(cv.sets)
length(cv.sets)
#Starting with the training
results.nn = vector(mode = "numeric", length = 10)
best.accuracy = 0
list.results = list(0, 0, 0, 0, 0)
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
require("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling set
dataset = ScaleSet(dataset)
#Starting k-fold cross validation
cv.sets = CVSet(dataset, k = 10, seed = 22)
str(cv.sets)
length(cv.sets)
#Initializing some variables
results = vector(mode = "numeric", length = 10)
list.results = list(0, 0, 0, 0, 0)
list.results[[1]] = results
list.results[[1]]
list.results
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
require("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling set
dataset = ScaleSet(dataset)
#Starting k-fold cross validation
cv.sets = CVSet(dataset, k = 10, seed = 22)
length(cv.sets)
#Initializing some variables
results = vector(mode = "numeric", length = 10)
list.results = list(0, 0, 0, 0, 0)
names(list.results) = c("Names", "Best_Model", "Best_Testing_Set", "Best_Predictions")
best.accuracy = 0
list.results
list.results = list(0, 0, 0, 0)
names(list.results) = c("Names", "Best_Model", "Best_Testing_Set", "Best_Predictions")
list.results
names(list.results) = c("Results", "Best_Model", "Best_Testing_Set", "Best_Predictions")
list.results
