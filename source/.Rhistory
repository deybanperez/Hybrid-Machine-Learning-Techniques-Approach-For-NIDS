#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source") #Virtual Machine
#setwd("/home/dperez/Tesis/source") #Server
#setwd("C:/Users/deyban.perez/Documents/Repos/source") #Windows
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -2) )
dataset[,i] = as.numeric(dataset[,i])
for (i in (ncol(dataset) -1):ncol(dataset) )
dataset[,i] = as.factor(dataset[,i])
#Splitting set
dataset.two = dataset[-(ncol(dataset)-1)]
dataset.two[, ncol(dataset.two)] = as.character(dataset.two[, ncol(dataset.two)])
dataset.two[dataset.two[,ncol(dataset.two)] == "attack", ncol(dataset.two)] = "Attack"
dataset.five = dataset[-ncol(dataset)]
#scaling sets
dataset$Label_Normal_or_Attack = NULL
dataset = ScaleSet(dataset)
dataset.two = ScaleSet(dataset.two)
dataset.five = ScaleSet(dataset.five)
#Codo de Jambu
IIC.Hartigan = vector(mode = "numeric", length = 30)
IIC.Lloyd = vector(mode = "numeric", length = 30)
IIC.Forgy = vector(mode = "numeric", length = 30)
IIC.MacQueen = vector(mode = "numeric", length = 30)
for (k in 1:30)
{
groups = kmeans(dataset[,ncol(dataset)-2], k, iter.max = 100, algorithm = "Hartigan-Wong")
IIC.Hartigan[k] = groups$tot.withinss
groups = kmeans(dataset[,ncol(dataset)-2], k, iter.max = 100, algorithm = "Lloyd")
IIC.Lloyd[k] = groups$tot.withinss
groups = kmeans(dataset[,ncol(dataset)-2], k, iter.max = 100, algorithm = "Forgy")
IIC.Forgy[k] = groups$tot.withinss
groups = kmeans(dataset[,ncol(dataset)-2], k, iter.max = 100, algorithm = "MacQueen")
IIC.MacQueen[k] = groups$tot.withinss
}
plot(IIC.Hartigan, col = "blue", type = "b", pch = 19, main = "Jambu Elbow",
xlab = "Variance", ylab = "Centers")
points(IIC.Lloyd, col = "red", type = "b", pch = 19)
points(IIC.Forgy, col = "green", type = "b", pch = 19)
points(IIC.MacQueen, col = "magenta", type = "b", pch= 19)
legend("topright", legend = c("Hartigan", "Lloyd", "Forgy", "MacQueen"),
col = c("blue","red", "green", "magenta"), pch = 19)
#Testing the models
#Five class model
results.five = vector(mode = "numeric", length = 10)
best.accuracy.five = 0
for (i in 1:length(results.five))
{
set.seed(i)
model.kmeans.five = kmeans(dataset.five[,1:(ncol(dataset.five)-1)],
5, iter.max = 100)
prediction.five = OrderKmeans(model.kmeans.five)
accuracy.five = mean(prediction.five == dataset.five$Label)
results.five[i] = accuracy.five
if(best.accuracy.five < accuracy.five)
{
best.prediction.five = prediction.five
best.accuracy.five = accuracy.five
}
}
#Printing results
results.five
#Calculating mean of results
mean(results.five) * 100
#Creating confusion matrix
confusion.matrix.five = table(Real = dataset.five$Label,
Prediction = best.prediction.five)
#Printing confusion matrix
confusion.matrix.five
#Printig accuracy rate and error rate
best.accuracy.five*100
ErrorRate(best.accuracy.five)*100
#Showing accuracy per label
AccuracyPerLabel(confusion.matrix.five, dataset.five)
#Confusion matrix Attack vs Normal
attack.normal.confusion.matrix.five = AttackNormalConfusionMatrix(dataset.five,
best.prediction.five)
attack.normal.confusion.matrix.five
AccuracyPerLabel(attack.normal.confusion.matrix.five, dataset.two[, ncol(dataset.two)])
AccuracyPerLabel(attack.normal.confusion.matrix.two, dataset.two[, ncol(dataset.two)])
attack.normal.confusion.matrix.five
AccuracyPerLabel(attack.normal.confusion.matrix.five, dataset.two)
attack.normal.confusion.matrix.five
dataset.two$Label
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
library("e1071")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
dataset = dataset.training
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
library("e1071")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling set
dataset = ScaleSet(dataset)
summary(dataset)
?scale
max(dataset[,1:ncol(dataset)-1])
min(dataset[,1:ncol(dataset)-1])
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
library("e1071")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
dataset = ScaleSet(dataset)
summary(dataset)
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading packages
library("e1071")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling set
dataset = ScaleSet(dataset)
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#setwd("C:/Users/deyban.perez/Documents/Repos/source") #Windows
#Loading packages
library("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading best objects
list.results = readRDS("normal_model/NN/Tests/list_results.rds")
#Showing all results
list.results$results
mean(list.results$results) * 100
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#setwd("C:/Users/deyban.perez/Documents/Repos/source") #Windows
#Loading packages
library("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading best objects
list.results = readRDS("normal_model/NN/Tests/list_results.rds")
#Showing all results
list.results$results
#Calculating the mean of the results
mean(list.results$results) * 100
#Calculating the confusion matrix with the last model created
confusion.matrix = table(Real = list.results$best_testing_set[,ncol(list.results$best_testing_set)],
Prediction = list.results$best_predictions)
#Showing confusion matrix
confusion.matrix
confusion.matrix
#Calculating Accuraccy
accuracy = mean(list.results$best_testing_set[,ncol(list.results$best_testing_set)] ==
list.results$best_predictions)
accuracy * 100
ErrorRate(accuracy) * 100
AccuracyPerLabel(confusion.matrix, list.results$best_testing_set)
attack.normal.confusion.matrix = AttackNormalConfusionMatrix(list.results$best_testing_set,
list.results$best_predictions)
attack.normal.confusion.matrix
Sensitivity(attack.normal.confusion.matrix) * 100
Especificity(attack.normal.confusion.matrix) * 100
Precision(attack.normal.confusion.matrix) * 100
kmeans.set = list.results$best_testing_set[list.results$best_predictions == "normal",]
dim(kmeans.set)
kmeans.set[,ncol(kmeans.set)] = as.character(kmeans.set[,ncol(kmeans.set)])
kmeans.set[kmeans.set[,ncol(kmeans.set)] != "normal",ncol(kmeans.set)] = "Attack"
SumLabels(kmeans.set, ncol(kmeans.set))
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#setwd("C:/Users/deyban.perez/Documents/Repos/source") #Windows
#Loading packages
library("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading best objects
list.results = readRDS("normal_model/NN/Tests/list_results.rds")
#Showing all results
list.results$results
#Calculating the mean of the results
mean(list.results$results) * 100
#Calculating the confusion matrix with the last model created
confusion.matrix = table(Real = list.results$best_testing_set[,ncol(list.results$best_testing_set)],
Prediction = list.results$best_predictions)
#Showing confusion matrix
confusion.matrix
#Calculating Accuraccy
accuracy = mean(list.results$best_testing_set[,ncol(list.results$best_testing_set)] ==
list.results$best_predictions)
accuracy * 100
ErrorRate(accuracy) * 100
#Showing accuracy per label
AccuracyPerLabel(confusion.matrix, list.results$best_testing_set)
#Confusion matrix Attack vs Normal
attack.normal.confusion.matrix = AttackNormalConfusionMatrix(list.results$best_testing_set,
list.results$best_predictions)
attack.normal.confusion.matrix
#Binary measures
Sensitivity(attack.normal.confusion.matrix) * 100
Especificity(attack.normal.confusion.matrix) * 100
Precision(attack.normal.confusion.matrix) * 100
#ROC Curve
probabilities = predict(list.results$best_model,
list.results$best_testing_set[, 1:(ncol(list.results$best_testing_set)-1)])
#Generating curve ROC
roc.data = DataROC(list.results$best_testing_set, probabilities,
list.results$best_predictions)
generate_ROC(scores = roc.data$Prob, real = roc.data$Label,
pred = roc.data$Prediction)
#Adding the second level with K-Means
kmeans.set = list.results$best_testing_set[list.results$best_predictions == "normal",]
kmeans.set[,ncol(kmeans.set)] = as.character(kmeans.set[,ncol(kmeans.set)])
kmeans.set[kmeans.set[,ncol(kmeans.set)] != "normal",ncol(kmeans.set)] = "Attack"
SumLabels(kmeans.set, ncol(kmeans.set))
#Finding best centers
matrix.centers = FindCentersKmeans(set = kmeans.set, clusters = 2,
iterations = 100, iter.max = 100)
#Training the absolute model
matrix.centers = matrix.centers/100
kmeans.model = kmeans(kmeans.set[,1:(ncol(kmeans.set)-1)], centers = matrix.centers,
iter.max = 100)
predictions = OrderKmeans(kmeans.model)
#Creating confusion matrix
confusion.matrix.kmeans.model = table(Real = kmeans.set[,ncol(kmeans.set)],
Prediction = predictions)
#Printing confusiopn matrix
confusion.matrix.kmeans.model
accuracy.kmeans.model = mean(predictions == kmeans.set[,ncol(kmeans.set)])
#Printing accuracy
accuracy.kmeans.model*100
#Printing error rate
ErrorRate(accuracy.kmeans.model)*100
AccuracyPerLabel(confusion.matrix.kmeans.model, kmeans.set)
Sensitivity(confusion.matrix.kmeans.model) * 100
Especificity(confusion.matrix.kmeans.model) * 100
Precision(confusion.matrix.kmeans.model) * 100
confusion.matrix.two.labels = TwoLevelsCM(confusion.matrix, confusion.matrix.kmeans.model)
accuracy.total = Accuracy(confusion.matrix.two.labels)
accuracy.total * 100
ErrorRate(accuracy.total) * 100
Sensitivity(confusion.matrix.two.labels) * 100
Especificity(confusion.matrix.two.labels) * 100
Precision(confusion.matrix.two.labels) * 100
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#setwd("C:/Users/deyban.perez/Documents/Repos/source") #Windows
#Loading packages
library("e1071")
library("nnet")
#Loading functions
source("functions/functions.R")
#Loading best objects
list.results = readRDS("normal_model/NN/Tests/list_results.rds")
#Showing all results
list.results$results
#Calculating the mean of the results
mean(list.results$results) * 100
#Calculating the confusion matrix with the last model created
confusion.matrix = table(Real = list.results$best_testing_set[,ncol(list.results$best_testing_set)],
Prediction = list.results$best_predictions)
#Showing confusion matrix
confusion.matrix
#Calculating Accuraccy
accuracy = mean(list.results$best_testing_set[,ncol(list.results$best_testing_set)] ==
list.results$best_predictions)
accuracy * 100
ErrorRate(accuracy) * 100
#Showing accuracy per label
AccuracyPerLabel(confusion.matrix, list.results$best_testing_set)
#Confusion matrix Attack vs Normal
attack.normal.confusion.matrix = AttackNormalConfusionMatrix(list.results$best_testing_set,
list.results$best_predictions)
attack.normal.confusion.matrix
#Binary measures
Sensitivity(attack.normal.confusion.matrix) * 100
Especificity(attack.normal.confusion.matrix) * 100
Precision(attack.normal.confusion.matrix) * 100
#ROC Curve
probabilities = predict(list.results$best_model,
list.results$best_testing_set[, 1:(ncol(list.results$best_testing_set)-1)])
#Generating curve ROC
roc.data = DataROC(list.results$best_testing_set, probabilities,
list.results$best_predictions)
generate_ROC(scores = roc.data$Prob, real = roc.data$Label,
pred = roc.data$Prediction)
#Adding the second level with K-Means
kmeans.set = list.results$best_testing_set[list.results$best_predictions == "normal",]
kmeans.set[,ncol(kmeans.set)] = as.character(kmeans.set[,ncol(kmeans.set)])
kmeans.set[kmeans.set[,ncol(kmeans.set)] != "normal",ncol(kmeans.set)] = "Attack"
SumLabels(kmeans.set, ncol(kmeans.set))
#Finding best centers
matrix.centers = FindCentersKmeans(set = kmeans.set, clusters = 2,
iterations = 100, iter.max = 100)
#Training the absolute model
matrix.centers = matrix.centers/100
kmeans.model = kmeans(kmeans.set[,1:(ncol(kmeans.set)-1)], centers = matrix.centers,
iter.max = 100)
#Ordering prediction
predictions = OrderKmeans(kmeans.model)
#Creating confusion matrix
confusion.matrix.kmeans.model = table(Real = kmeans.set[,ncol(kmeans.set)],
Prediction = predictions)
#Printing confusiopn matrix
confusion.matrix.kmeans.model
#Calculating accuracy
accuracy.kmeans.model = mean(predictions == kmeans.set[,ncol(kmeans.set)])
#Printing accuracy
accuracy.kmeans.model*100
#Printing error rate
ErrorRate(accuracy.kmeans.model)*100
#Printing accuracy per labbel
AccuracyPerLabel(confusion.matrix.kmeans.model, kmeans.set)
#Binary measures
Sensitivity(confusion.matrix.kmeans.model) * 100
Especificity(confusion.matrix.kmeans.model) * 100
Precision(confusion.matrix.kmeans.model) * 100
#Total statistics
confusion.matrix.two.labels = TwoLevelsCM(confusion.matrix, confusion.matrix.kmeans.model)
accuracy.total = Accuracy(confusion.matrix.two.labels)
accuracy.total * 100
ErrorRate(accuracy.total) * 100
Sensitivity(confusion.matrix.two.labels) * 100
Especificity(confusion.matrix.two.labels) * 100
Precision(confusion.matrix.two.labels) * 100
