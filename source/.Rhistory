rm(list = ls())
source("functions/functions.R")
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
install.packages("e1071")
install.packages("factoextra")
install.packages("nnet")
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("nnet")
require("factoextra")
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Transforming features into numeric class
for (i in 1:(ncol(dataset)-1))
dataset[,i] = as.numeric(dataset[,i])
#Transforming remaining labes into numeric class
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling
dataset = ScaleSet(dataset)
################################################################################
#Beggining PCA
################################################################################
pca = prcomp(dataset[,-41], scale. = TRUE)
summary(pca)
std.deviation = pca$sdev
PC.variance = std.deviation^2
PR.variance = PC.variance/sum(PC.variance)
cum.variance = cumsum(PR.variance) * 100
summary.pca = data.frame(std_deviation = std.deviation,
PC_variance = PC.variance,
PR_variance = PR.variance,
cum_variance = cum.variance)
summary.pca
plot(summary.pca$cum_variance,
ylab = "Cumulative Proportion",
xlab = "Number of Principal Components",
type = "b", col = "blue")
fviz_pca_var(pca, col.var= "contrib")
dataset.pca = as.data.frame(pca$x)
dataset.pca = data.frame(dataset.pca,
Label = dataset$Label)
cv.sets = CVSet(dataset.pca, k = 10, seed = 22)
length(cv.sets)
#Preparing environment
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("nnet")
#Loading the results
results  = readRDS("feature_selection/NN/results_PCA.rds")
#Setting work directory
rm(list = ls())
#setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading functions
source("functions/functions.R")
#Installing packages
#install.packages("e1071")
#install.packages("factoextra")
#install.packages("nnet")
#Loading packages
require("nnet")
require("factoextra")
#Loading datasets
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecessary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Transforming features into numeric class
for (i in 1:(ncol(dataset)-1))
dataset[,i] = as.numeric(dataset[,i])
#Transforming remaining labes into numeric class
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling
dataset = ScaleSet(dataset)
################################################################################
#Beggining PCA
################################################################################
pca = prcomp(dataset[,-41], scale. = TRUE)
summary(pca)
std.deviation = pca$sdev
PC.variance = std.deviation^2
PR.variance = PC.variance/sum(PC.variance)
cum.variance = cumsum(PR.variance) * 100
summary.pca = data.frame(std_deviation = std.deviation,
PC_variance = PC.variance,
PR_variance = PR.variance,
cum_variance = cum.variance)
summary.pca
plot(summary.pca$cum_variance,
ylab = "Cumulative Proportion",
xlab = "Number of Principal Components",
type = "b", col = "blue")
fviz_pca_var(pca, col.var= "contrib")
dataset.pca = as.data.frame(pca$x)
dataset.pca = data.frame(dataset.pca,
Label = dataset$Label)
cv.sets = CVSet(dataset.pca, k = 10, seed = 22)
length(cv.sets)
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
source("functions/functions.R")
require("nnet")
#Loading the results
results  = readRDS("feature_selection/NN/results_PCA.rds")
###########################################################
#Creating new variables
sd.results = vector(mode = "numeric", length = nrow(results))
mean.results = vector(mode = "numeric", length = nrow(results))
#Calculating standard deviation
for (i in 1:length(sd.results))
sd.results[i] = sd(results[i,])
#Calculating mean
for (i in 1:length(mean.results))
mean.results[i] = mean(results[i,])
##########################################################
#Splitting the screen in 2
par(mfrow = c(1,2))
#Plotting standard deviation vs number of components
plot(sd.results, col = "blue", type = "b",
main = "Standard Deviation vs Number of Components",
xlab = "Number of Components", ylab = "Standard Deviation")
#Plotting mean accuracy vs number of components
plot(mean.results, col = "blue", type = "b",
main = "Mean Accuracy vs Number of Components",
xlab = "Number of Components", ylab = "Mean Accuracy")
plot(dataset.pca)
#Setting work directory
rm(list = ls())
#setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading functions
source("functions/functions.R")
#Installing packages
#install.packages("e1071")
#install.packages("factoextra")
#install.packages("nnet")
#Loading packages
require("nnet")
require("factoextra")
#Loading datasets
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecessary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Transforming features into numeric class
for (i in 1:(ncol(dataset)-1))
dataset[,i] = as.numeric(dataset[,i])
#Transforming remaining labes into numeric class
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling
dataset = ScaleSet(dataset)
################################################################################
#Beggining PCA
################################################################################
pca = prcomp(dataset[,-41], scale. = TRUE)
summary(pca)
std.deviation = pca$sdev
PC.variance = std.deviation^2
PR.variance = PC.variance/sum(PC.variance)
cum.variance = cumsum(PR.variance) * 100
summary.pca = data.frame(std_deviation = std.deviation,
PC_variance = PC.variance,
PR_variance = PR.variance,
cum_variance = cum.variance)
summary.pca
plot(summary.pca$cum_variance,
ylab = "Cumulative Proportion",
xlab = "Number of Principal Components",
type = "b", col = "blue")
fviz_pca_var(pca, col.var= "contrib")
dataset.pca = as.data.frame(pca$x)
dataset.pca = data.frame(dataset.pca,
Label = dataset$Label)
cv.sets = CVSet(dataset.pca, k = 10, seed = 22)
length(cv.sets)
plot(dataset.pca)
plot(dataset.pca[1,2])
plot(dataset.pca[,1:2])
View(dataset.pca)
colors = dataset.pca[,ncol(dataset.pca)]
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "1"
colors[colors == "normal"] = "0"
colors = as.numeric(colors)
summary(colors)
head(colors)
head(dataset.pca[,1:2],10)
plot(dataset.pca[,1:2], col = colors)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "2"
colors[colors == "normal"] = "1"
colors = as.numeric(colors)
plot(dataset.pca[,1:2], col = colors)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "2"
colors[colors == "normal"] = "1"
colors = as.numeric(colors)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2")
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "4"
colors[colors == "normal"] = "3"
colors = as.numeric(colors)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2")
#PCA with 10-Fold Cross Validation
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "5"
colors[colors == "normal"] = "3"
colors = as.numeric(colors)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "4"
colors[colors == "normal"] = "3"
colors = as.numeric(colors)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
legend("topright", legend = c("Normal", "Ataque"),
col = c("green","blue"), pch = 19)
legend("bottomright", legend = c("Normal", "Ataque"),
col = c("green","blue"), pch = 19)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors != "normal"] = "4"
colors[colors == "normal"] = "3"
colors = as.numeric(colors)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
legend("bottomright", legend = c("Normal", "Ataque"),
col = c("green","blue"), pch = 19)
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
legend("bottomright", legend = c("Normal", "Ataque"),
col = c("green","blue"), pch = 19)
#Setting work directory
rm(list = ls())
#setwd("/home/dperez/Documents/Repos/Tesis/source")
#setwd("/home/dperez/Tesis/source")
#Loading functions
source("functions/functions.R")
#Installing packages
#install.packages("e1071")
#install.packages("factoextra")
#Loading packages
require("e1071")
require("factoextra")
#Loading datasets
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecessary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Transforming features into numeric class
for (i in 1:(ncol(dataset)-1))
dataset[,i] = as.numeric(dataset[,i])
#Transforming remaining labes into numeric class
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#Scaling
dataset = ScaleSet(dataset)
################################################################################
#Beggining PCA
################################################################################
pca = prcomp(dataset[,-41], scale. = TRUE)
summary(pca)
std.deviation = pca$sdev
PC.variance = std.deviation^2
PR.variance = PC.variance/sum(PC.variance)
cum.variance = cumsum(PR.variance) * 100
summary.pca = data.frame(std_deviation = std.deviation,
PC_variance = PC.variance,
PR_variance = PR.variance,
cum_variance = cum.variance)
summary.pca
plot(summary.pca$cum_variance,
ylab = "Cumulative Proportion",
xlab = "Number of Principal Components",
type = "b", col = "blue")
fviz_pca_var(pca, col.var= "contrib")
dataset.pca = as.data.frame(pca$x)
dataset.pca = data.frame(dataset.pca,
Label = dataset$Label)
cv.sets = CVSet(dataset.pca, k = 10, seed = 22)
length(cv.sets)
#Plotting the two first main components
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors == "normal"] = "black"
colors[colors == "DOS"] = "red"
colors[colors == "Probing"] = "green"
colors[colors == "R2L"] = "blue"
colors[colors == "U2R"] = "cyan"
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors == "normal"] = "black"
colors[colors == "DoS"] = "red"
colors[colors == "Probing"] = "green"
colors[colors == "R2L"] = "blue"
colors[colors == "U2R"] = "cyan"
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors == "normal"] = "cyan"
colors[colors == "DoS"] = "red"
colors[colors == "Probing"] = "green"
colors[colors == "R2L"] = "blue"
colors[colors == "U2R"] = "cyan"
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
colors = as.character(dataset.pca[,ncol(dataset.pca)])
colors[colors == "normal"] = "black"
colors[colors == "DoS"] = "red"
colors[colors == "Probing"] = "green"
colors[colors == "R2L"] = "blue"
colors[colors == "U2R"] = "cyan"
plot(x = dataset.pca[,1],  y = dataset.pca[,2], col = colors,
main = "Gráfico de las Dos Principales Componentes",
xlab = "Componente 1", ylab = "Componente 2", pch = 19)
legend("bottomleft", legend = c("Normal", "DoS", "Probing", "R2L", "U2R"),
col = c("black","red", "green", "blue", "cyan"), pch = 19)
