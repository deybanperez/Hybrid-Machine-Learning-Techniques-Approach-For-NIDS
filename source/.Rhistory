installed.packages("neuralnet")
install.packages("neuralnet")
?kmeans
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#Loading packages
require("e1071")
require("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#splitting the dataset into training and testing
#Making a strarified sampling
################################################
#Start calculating the number of each class
vector.ocurrences = SumLabels(dataset, ncol(dataset))
#Create probability vector
vector.probabilities = ProbVector(dataset, vector.ocurrences)
#Making stratified sample
indexes.training = IndexesTrainingSample(dataset, vector.probabilities, 0.8, 22)
trainingset = dataset[indexes.training, ]
testingset = dataset[-indexes.training, ]
################################################
#           Training the models                #
################################################
#Scaling testingset
testingset = ScaleSet(testingset)
#Scaling trainingset
trainingset = ScaleSet(trainingset)
model.kmeans = kmeans(trainingset, 5)
#Setting work directory
rm(list = ls())
setwd("/home/dperez/Documents/Repos/Tesis/source")
#Loading packages
require("e1071")
require("nnet")
#Loading functions
source("functions/functions.R")
#Loading dataset
dataset.training = read.csv("../dataset/NSLKDD_Training_New.csv",
sep = ",", header = TRUE)
#Removing unnecesary labels
dataset = dataset.training
dataset$Label_Normal_TypeAttack = NULL
dataset$Label_Num_Classifiers = NULL
dataset$Label_Normal_or_Attack = NULL
#Assigning classes to the data
for (i in 1 : (ncol(dataset) -1) )
dataset[,i] = as.numeric(dataset[,i])
dataset[,ncol(dataset)] = as.factor(dataset[,ncol(dataset)])
#splitting the dataset into training and testing
#Making a strarified sampling
################################################
#Start calculating the number of each class
vector.ocurrences = SumLabels(dataset, ncol(dataset))
#Create probability vector
vector.probabilities = ProbVector(dataset, vector.ocurrences)
#Making stratified sample
indexes.training = IndexesTrainingSample(dataset, vector.probabilities, 0.8, 22)
trainingset = dataset[indexes.training, ]
testingset = dataset[-indexes.training, ]
################################################
#           Training the models                #
################################################
#Scaling testingset
testingset = ScaleSet(testingset)
#Scaling trainingset
trainingset = ScaleSet(trainingset)
model.kmeans = kmeans(trainingset[1: (ncol(trainingset) -1)], 5, )
mean(model.kmeans == testingset[, ncol(testingset)])
mean(model.kmeans$cluster == testingset[, ncol(testingset)])
model.kmeans$cluster
sum(model.kmeans$centers == 1)
sum(model.kmeans$centers == 2)
model.kmeans$centers
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
sum(model.kmeans$cluster == 3)
sum(model.kmeans$cluster == 4)
sum(model.kmeans$cluster == 5)
model.kmeans = kmeans(trainingset[1: (ncol(trainingset) -1)], 5)
sum(model.kmeans$cluster == 5)
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
sum(model.kmeans$cluster == 3)
sum(model.kmeans$cluster == 4)
sum(model.kmeans$cluster == 5)
set.seed(22)
model.kmeans = kmeans(trainingset[1: (ncol(trainingset) -1)], 5)
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
sum(model.kmeans$cluster == 3)
model.kmeans$cluster
sum(model.kmeans$cluster == 4)
sum(model.kmeans$cluster == 5)
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
sum(model.kmeans$cluster == 3)
#K-Means
set.seed(22)
model.kmeans = kmeans(trainingset[1: (ncol(trainingset) -1)], 5)
sum(model.kmeans$cluster == 3)
sum(model.kmeans$cluster == 3
)
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
sum(model.kmeans$cluster == 3)
sum(model.kmeans$cluster == 4)
SumLabels(trainingset, 41)
set.seed(22)
model.kmeans = kmeans(trainingset[1: (ncol(trainingset) -1)], 2)
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
set.seed(22)
model.kmeans = kmeans(trainingset[1: (ncol(trainingset) -1)], 2)
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
set.seed(22)
model.kmeans = kmeans(testingset[1: (ncol(testingset) -1)], 2)
model.kmeans$cluster
set.seed(22)
model.kmeans = kmeans(testingset[1: (ncol(testingset) -1)], 5)
model.kmeans$cluster
model.kmeans$cluster == 1
sum(model.kmeans$cluster == 1)
sum(model.kmeans$cluster == 2)
sum(model.kmeans$cluster == 3)
sum(model.kmeans$cluster == 4)
sum(model.kmeans$cluster == 5)
